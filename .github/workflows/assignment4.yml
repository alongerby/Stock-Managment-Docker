name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ steps.set_build_status.outputs.build_status }}
      start_time: ${{ steps.get_start_time.outputs.start_time }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Workflow Start Time
        id: get_start_time
        run: |
          # Capture the start time in ISO minutes format
          echo "start_time=$(date -Iminutes)" >> $GITHUB_OUTPUT

      - name: Build Docker Images via Docker Compose
        run: |
          docker compose build
        # (If the build fails, this job fails and subsequent outputs wonâ€™t be set.)

      - name: Set Build Status
        id: set_build_status
        run: |
          # If we reached here, assume images built successfully.
          echo "build_status=image successfully built" >> $GITHUB_OUTPUT

  test:
    name: Test Application
    needs: build
    runs-on: ubuntu-latest
    outputs:
      container_status: ${{ steps.set_container_status.outputs.container_status }}
      test_status: ${{ steps.set_test_status.outputs.test_status }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start Application Containers
        run: |
          docker compose up -d
          # Pause briefly to let containers start
          sleep 10
          docker compose ps

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests

      - name: Run Pytest Tests
        id: run_tests
        run: |
          # Run tests and capture output in a file
          pytest -v tests/assn4_tests.py > assn4_test_results.txt

      - name: Upload Pytest Results Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn4_test_results.txt
          path: assn4_test_results.txt

  query:
    name: Run Query Job and Finalize Log
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Start Containers for Query Job
        run: |
          docker compose up -d
          sleep 10

      - name: Run Query Job and Generate Response File
        id: run_query
        run: |
          # Ensure query.txt exists; it should contain lines like:
          # stocks:sharesgt=10
          # capital gains:portfolio=stocks1
          if [ ! -f query.txt ]; then
            echo "query.txt not found. Please add a query.txt file in the repo."
            exit 1
          fi
          > response.txt
          while IFS= read -r line; do
            # Split the line into service and query string (assumes format: service:query)
            service=$(echo "$line" | cut -d':' -f1 | tr -d ' ')
            qs=$(echo "$line" | cut -d':' -f2- | xargs)
            if [ "$service" = "stocks" ]; then
              res=$(curl -s "http://localhost:5001/stocks?$qs")
            elif [ "$service" = "capitalgains" ] || [ "$service" = "capital gains" ]; then
              res=$(curl -s "http://localhost:5003/capital-gains?$qs")
            else
              res="Invalid service"
            fi
            echo "query: $line" >> response.txt
            echo "response:" >> response.txt
            echo "$res" >> response.txt
          done < query.txt

      - name: Upload Query Response Artifact
        uses: actions/upload-artifact@v4
        with:
          name: response.txt
          path: response.txt

      - name: Generate Final Log File
        if: always()
        run: |
          LOG_FILE="log.txt"
          # Line 1: current time (ISO minutes)
          date -Iminutes > $LOG_FILE
          # Line 2: submitter names (update with your actual names)
          echo "Alon Gerby" >> $LOG_FILE

          # Check if the build job succeeded; if not, output only lines 1-3 and exit.
          if [ -z "${{ needs.build.outputs.build_status }}" ]; then
            echo "image not able to be built" >> $LOG_FILE
            exit 0
          else
            echo "${{ needs.build.outputs.build_status }}" >> $LOG_FILE
          fi

          # Check if the container startup succeeded; if not, output line 4 and exit.
          if [ -z "${{ needs.test.outputs.container_status }}" ]; then
            echo "Container failed to run" >> $LOG_FILE
            exit 0
          else
            echo "${{ needs.test.outputs.container_status }}" >> $LOG_FILE
          fi

          # Finally, output test status (line 5); if not set, mark tests as failed.
          if [ -z "${{ needs.test.outputs.test_status }}" ]; then
            echo "tests failed" >> $LOG_FILE
          else
            echo "${{ needs.test.outputs.test_status }}" >> $LOG_FILE
          fi

      - name: Upload Log File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt
